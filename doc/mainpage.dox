/** @mainpage MODBUS-CPP

MODBUS-CPP library is a modern C++ library for communicating with Modbus devices
by TCP/IP. It is designed to be simple to use, typesafe and to have great performance.

@section mainpage-feature Features

-   Support of common function codes:
    -   @cpp 0x03 @ce Read Holding Registers
    -   @cpp 0x04 @ce Read Input Registers
    -   @cpp 0x06 @ce Write Single Register
    -   @cpp 0x10 @ce Write Multiple Registers
-   Support for all exception codes
-   Automatic scheduling of register polls
-   Asynchronous request handling by worker threads using <a href="https://github.com/chriskohlhoff/asio">asio</a>
-   Logging using <a href="https://github.com/gabime/spdlog">spdlog</a>

@section mainpage-build Building

The following dependencies are needed to build the library:
-   A modern C++ compiler fully supporting C++14 standard.
    This library is continously tested with GCC 6.4.0 and LLVM/Clang 5.0.0.
    It is also regularly built using Microsoft Visual Studio 2017.
-   <a href="https://cmake.org/">CMake 3.8+</a>
-   A git client supporting submodules (1.5.3+)

To build the library, follow these steps:
-   Clone the repository recursively with `git clone https://github.com/aegis4ics/modbus-cpp.git --recursive`
-   Create a `build` directory inside the project.
-   Inside the build directory, configure the project using `cmake ..` or the interactive `ccmake ..`
    The default options should work out of the box.
-   Build the project with `cmake --build .`

@subsection mainpage-building-cmake CMake usage

The following CMake cache variables can be tuned to control the building of the library:
-   `MODBUS_BUILD_TESTS`: Set to `ON` to build the unit tests and the performance tests should be built.
    These tests will appear as `modbus_tests` and `modbus_perf_tests` targets respectively.
-   `MODBUS_BUILD_EXAMPLE`: Set to `ON` to build the example application. The example will appear as
    `modbus_example` target.

By default, these variables will be set to `ON` when building only this library, and to `OFF` if
the project is added with `add_subdirectory`.

To use this library in a project, it is recommend to simply add this repository as a submodule, then
add this project in CMake with `add_subdirectory`. Then, the target `modbus-cpp` will be available to link with.
For example, `foo` project can use MODBUS-CPP by doing this in its `CMakeLists.txt`.

@code{.cmake}
add_subdirectory(./modbus-cpp)
add_executable(foo PRIVATE modbus-cpp)
@endcode

*/