namespace modbus
{

/** @page Example

@brief This page presents a complete usage example of the library.

It creates a simple program
that connects to a device on the localhost, schedules a periodic request and provides keys
to send specific request, modify the scheduled request and quit the program.

@section example-walkthrough Walkthrough

The program includes @ref IModbusManager.h and @ref LoggerFactory.h and the exception types
that will be used by the program. Then, since all the operations of the library are in the
@ref modbus namespace, it uses the namespace.

In the main function, it first creates a logger using the @ref LoggerFactory. The logger
pointer will be passed later on.

Then comes the heart of the library, @ref IModbusManager. This class will manage a
thread pool where all the I/O operations will occur. It is created via its static
method @ref IModbusManager::create().

Then, from the @ref IModbusManager, a @ref IChannel is created. A channel will hold the
TCP socket used to communicate with devices. Users cannot directly send requests with
@ref IChannel, they need to create a @ref ISession. That's exactly what this example does.
It creates a session by specifying the @ref UnitIdentifier of the device it communicates
with and the default timeout value.

Once the session is created, users can perform all the tasks they need. The example starts
by scheduling a @ref ReadHoldingRegistersRequest every 2 seconds. The library will take
care of sending the request when necessary and will call the handler passed in when
responses or errors are received.

The example proceeds with the user interaction. The `a` key will send a @ref ReadCoilsRequest
to the device. A lambda function is passed to the @ref ISession::send_request() to act as
a response handler. Note the parameter of the lambda, a @ref Expected. It is necessary
to check whether the response is valid or not before manipulating it. The code shows
a basic example for logging whether or not the response is valid. The `w` key is similar
and will send a @ref WriteMultipleRegistersRequest.

The `c` key starts and stops the scheduled request by manipulating the @ref IScheduledRequest.
The `z` key modifies the polling frequency similarly.

Finally, the `q` key stops the application. Notice that no cleanup code is necessary.
Once the @ref IModbusManager will go out of scope, its destructor will be called and
all the operations will be gracefully canceled. The background threads will be joined
and the application will exit.

@section example-code Code

@include main.cpp

*/

}
